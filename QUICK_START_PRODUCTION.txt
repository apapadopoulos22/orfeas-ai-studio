üöÄ ORFEAS AI STUDIO - QUICK START GUIDE
================================================

DEPLOYMENT STATUS: ‚úÖ READY TO LAUNCH

=== WHAT WAS UPDATED ===

1. START_SERVER.bat - PRODUCTION READY
   ‚úÖ Now sets FLASK_ENV=production
   ‚úÖ DEBUG mode disabled for security
   ‚úÖ GPU optimizations enabled
   ‚úÖ Environment auto-configured
   ‚úÖ Enhanced deployment messaging

2. synexa-style-studio.html - DEPLOYED
   ‚úÖ API_BASE: https://api.orfeas.ai (production)
   ‚úÖ Three.js viewer integrated
   ‚úÖ 3DViewer.net fallback active
   ‚úÖ All error handlers in place
   ‚úÖ Download functionality ready

=== LAUNCH SERVER IN 3 STEPS ===

STEP 1: Open Command Prompt or PowerShell
  ‚Ä¢ Press: Win+R
  ‚Ä¢ Type: cmd
  ‚Ä¢ Press: Enter

STEP 2: Navigate to Project
  cd c:\Users\johng\Documents\oscar

STEP 3: Run Server
  START_SERVER.bat

  ‚ûú Server will start on http://127.0.0.1:5000
  ‚ûú Wait 30-60 seconds for full initialization
  ‚ûú GPU will auto-load Hunyuan3D-2.1 model

=== ACCESS THE STUDIO ===

Option A - Direct Studio (Recommended)
  http://127.0.0.1:5000/studio

Option B - Health Check First
  http://127.0.0.1:5000/health

Option C - Local Frontend
  File: synexa-style-studio.html (located in project root)

=== QUICK TEST WORKFLOW ===

1. Open: http://127.0.0.1:5000/studio
2. Upload: Any image (JPG, PNG, WebP)
3. Settings:
   ‚Ä¢ Quality: 7 (default, good balance)
   ‚Ä¢ Format: STL (standard 3D format)
   ‚Ä¢ Dimensions: 512 (recommended)
4. Generate: Click "Generate 3D Model"
5. View:
   ‚Ä¢ Three.js: Native WebGL viewer (primary)
   ‚Ä¢ 3DViewer: Online fallback (if WebGL unavailable)
   ‚Ä¢ Download: STL file for external viewers
6. Download: Save STL to your computer
7. Open: In Windows 3D Viewer, Blender, or MeshLab

=== PRODUCTION FEATURES ===

‚úÖ GPU-Accelerated Processing
   ‚Ä¢ NVIDIA RTX 3090 (24GB VRAM)
   ‚Ä¢ CUDA 12.0 optimized
   ‚Ä¢ Real-time model generation

‚úÖ Three-Layer Viewing System
   ‚Ä¢ Primary: Three.js WebGL viewer
   ‚Ä¢ Fallback: 3DViewer.net iframe
   ‚Ä¢ Download: Universal STL format

‚úÖ Security & Monitoring
   ‚Ä¢ Production Flask mode
   ‚Ä¢ Debug mode disabled
   ‚Ä¢ Logging enabled
   ‚Ä¢ Health monitoring active

‚úÖ Professional UI
   ‚Ä¢ Synexa-inspired dark theme
   ‚Ä¢ Responsive design
   ‚Ä¢ Real-time progress updates
   ‚Ä¢ Error handling with helpful guidance

=== MONITORING DURING OPERATION ===

Backend Logs (Real-time):
  Get-Content "c:\Users\johng\Documents\oscar\backend\logs\backend_requests.log" -Tail 50 -Wait

GPU Status:
  nvidia-smi

Health Endpoint:
  http://127.0.0.1:5000/health
  (Returns JSON with GPU info, processor status, metrics)

=== TROUBLESHOOTING ===

‚ùì Server won't start
  ‚Ä¢ Check Python is installed: python --version
  ‚Ä¢ Check backend directory exists
  ‚Ä¢ Check port 5000 is not in use
  ‚Ä¢ Review logs: backend/logs/backend_requests.log

‚ùì "Cannot connect to backend"
  ‚Ä¢ Wait 60 seconds (Hunyuan3D loading)
  ‚Ä¢ Check health: http://127.0.0.1:5000/health
  ‚Ä¢ Restart: Close and re-run START_SERVER.bat

‚ùì "WebGL not supported"
  ‚Ä¢ Automatic fallback to 3DViewer.net (no action needed)
  ‚Ä¢ Or download STL and open in desktop viewer

‚ùì GPU out of memory
  ‚Ä¢ Reduce GPU_MEMORY_LIMIT in START_SERVER.bat
  ‚Ä¢ Reduce MAX_CONCURRENT_JOBS
  ‚Ä¢ Wait between generations

=== ENVIRONMENT VARIABLES (Auto-Set) ===

FLASK_ENV=production              # Production mode
DEBUG=false                        # Security
DEVICE=cuda                        # GPU acceleration
GPU_MEMORY_LIMIT=0.8              # 80% of VRAM
MAX_CONCURRENT_JOBS=3             # Parallel processing
ENABLE_MONITORING=true            # Health checks
LOG_LEVEL=INFO                     # Logging detail

=== FILES STRUCTURE ===

c:\Users\johng\Documents\oscar\
‚îú‚îÄ‚îÄ START_SERVER.bat              ‚Üê Launch this
‚îú‚îÄ‚îÄ synexa-style-studio.html      ‚Üê Frontend (prod API)
‚îú‚îÄ‚îÄ backend/
‚îÇ   ‚îú‚îÄ‚îÄ main.py                   ‚Üê Flask server
‚îÇ   ‚îú‚îÄ‚îÄ hunyuan_integration.py    ‚Üê 3D generation
‚îÇ   ‚îú‚îÄ‚îÄ gpu_manager.py            ‚Üê GPU handling
‚îÇ   ‚îî‚îÄ‚îÄ logs/
‚îÇ       ‚îî‚îÄ‚îÄ backend_requests.log  ‚Üê Server logs
‚îî‚îÄ‚îÄ Hunyuan3D-2.1/
    ‚îî‚îÄ‚îÄ (3D model files)

=== KEYBOARD SHORTCUTS ===

Ctrl+C                             Stop server
Ctrl+L or Cmd+L (in viewer)       Toggle lighting
Left Mouse Drag                    Rotate model (Three.js)
Right Mouse Drag                   Pan model
Mouse Wheel                        Zoom in/out

=== SUPPORT RESOURCES ===

Documentation:
  ‚Ä¢ PRODUCTION_DEPLOYMENT_GUIDE.txt
  ‚Ä¢ DEPLOYMENT_ARCHITECTURE.txt
  ‚Ä¢ THREE_JS_IFRAME_FALLBACK_IMPLEMENTATION.md

Logs:
  ‚Ä¢ backend/logs/backend_requests.log

Status:
  ‚Ä¢ http://127.0.0.1:5000/health

API Endpoints:
  ‚Ä¢ POST /api/upload-image
  ‚Ä¢ POST /api/generate-3d
  ‚Ä¢ GET /api/job-status/{job_id}
  ‚Ä¢ GET /api/download/{job_id}/{filename}

=== PRODUCTION DEPLOYMENT STATUS ===

Environment:        ‚úÖ PRODUCTION MODE
Frontend:          ‚úÖ DEPLOYED (API_BASE production)
Backend:           ‚úÖ READY
GPU:               ‚úÖ RTX 3090 Configured
Logging:           ‚úÖ ENABLED
Monitoring:        ‚úÖ ACTIVE
Security:          ‚úÖ DEBUG=false
Documentation:     ‚úÖ COMPLETE

READY FOR PRODUCTION USE ‚úÖ

================================================
To launch: START_SERVER.bat
Then visit: http://127.0.0.1:5000/studio
================================================
