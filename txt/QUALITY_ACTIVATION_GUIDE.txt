# QUALITY MONITORING ACTIVATION GUIDE 

**Quick Start: Activate Quality Monitoring in 1 Command**

---

## âš¡ INSTANT ACTIVATION

```powershell
cd c:\Users\johng\Documents\Erevus\orfeas
.\ACTIVATE_QUALITY_MONITORING.ps1
```

**What it does:**
1.  Restarts Grafana with updated quality dashboard (10 new panels)
2.  Verifies backend quality validation is active
3.  Tests Prometheus metrics export
4.  Generates test 3D model to populate metrics
5.  Opens Grafana dashboard in browser
6.  Displays comprehensive status report

**Time to Complete:** ~2-3 minutes

---

##  PREREQUISITES

Before running the activation script:

 **Backend must be running:**
```powershell
cd c:\Users\johng\Documents\Erevus\orfeas\backend
$env:FLASK_ENV='production'; $env:TESTING='0'; python main.py
```

 **Docker must be installed** (for Grafana restart)
 **Monitoring stack must exist:** `backend/monitoring_stack/`

---

##  WHAT TO EXPECT

### **Console Output:**

```

   QUALITY MONITORING ACTIVATION SCRIPT


STEP 1: Checking Prerequisites
→ Checking if Docker is available...
 Docker is installed
 Monitoring stack directory found
 Grafana dashboard JSON found

STEP 2: Restarting Grafana
→ Stopping existing containers...
→ Starting monitoring stack with updated dashboard...
 Monitoring stack containers started
 Grafana is ready!

STEP 3: Verifying Backend Status
→ Checking backend health endpoint...
 ORFEAS Backend is running (HTTP 200)

STEP 4: Verifying Quality Validation
→ Checking Prometheus metrics endpoint...
 All 7 quality metrics are registered! 

STEP 5: Generating Test 3D Model
→ Submitting 3D generation request...
 3D generation request submitted!
 Quality Metrics Received! 
  Overall Score: 0.89
  Quality Grade: A
  Printable: True
  Manifold: True

STEP 6: Verifying Quality Metrics in Prometheus
Quality Metrics:
  Overall Score: 0.89
  BG Removal: 0.92
  Shape: 0.88
  Texture: 0.85
  Final Mesh: 0.90
  Auto-Repairs: Tracked 
  Quality Grades: Tracked 

STEP 7: Verifying Grafana Dashboard
 Grafana is running (HTTP 200)
  URL: http://localhost:3000
  Login: admin / orfeas_admin_2025


   ACTIVATION COMPLETE

```

---

##  VERIFICATION CHECKLIST

After running the script, verify:

### **1. Backend Logs**
Check for `[QUALITY]` events:
```
[QUALITY] Background removal score: 0.920
[QUALITY] Shape generation score: 0.880, manifold: True, triangles: 12450
[QUALITY] Auto-repair applied to mesh: ['fill_holes', 'fix_normals']
[QUALITY] Texture coherence score: 0.850
[QUALITY] Final mesh score: 0.900, printable: True, watertight: True
[QUALITY] Overall score: 0.890 (A)
[QUALITY] Metrics tracked - Overall: 0.890 (A), Manifold: True, Printable: True
```

### **2. Prometheus Metrics**
```powershell
curl http://localhost:5000/metrics | Select-String "quality"
```

Expected output:
```
quality_overall_score 0.89
quality_bg_removal_score 0.92
quality_shape_score 0.88
quality_texture_score 0.85
quality_final_score 0.90
quality_manifold_rate 85.0
quality_printable_rate 80.0
quality_auto_repairs_total{repair_type="fill_holes"} 1
quality_grade_total{grade="A"} 1
```

### **3. Grafana Dashboard**
1. Open: http://localhost:3000
2. Login: `admin` / `orfeas_admin_2025`
3. Navigate to: "ORFEAS AI 2D→3D Studio - Production Monitoring"
4. Scroll down to row 32
5. Verify all 10 quality panels are visible:
   -  Panel 15: Overall Quality Gauge
   -  Panel 16: Stage Scores
   -  Panel 17: Auto-Repairs Counter
   -  Panel 18: Manifold/Printable Rates
   -  Panel 19: Quality Trend Graph
   -  Panel 20: Quality Distribution Heatmap
   -  Panel 21: Quality Grade Pie Chart
   -  Panel 22: Auto-Repair Breakdown
   -  Panel 23: Validation Failures (with alert)
   -  Panel 24: Threshold Passes

---

##  TROUBLESHOOTING

### **Error: "Backend is not running!"**

**Solution:**
```powershell
cd c:\Users\johng\Documents\Erevus\orfeas\backend
$env:FLASK_ENV='production'; $env:TESTING='0'; python main.py
```

Wait for backend to fully initialize (look for `[QUALITY] Quality Validator initialized`), then re-run activation script.

### **Error: "Docker is not installed"**

**Solution 1 (Recommended):** Install Docker Desktop for Windows

**Solution 2 (Manual):**
- Skip Docker restart
- Manually restart Grafana service
- Continue with script when prompted

### **Error: "No quality metrics found"**

This is **NORMAL** if no 3D model has been generated yet!

**Solution:** Generate a 3D model:
```powershell
# Using web interface
Start-Process http://localhost:5000/studio

# Or using API
curl -X POST http://localhost:5000/api/generate-3d `
  -F "image=@test_image.png" `
  -F "format=glb"
```

Wait 30-60 seconds, then check metrics again.

### **Error: "Grafana dashboard not found"**

**Cause:** Dashboard JSON file missing or path incorrect

**Solution:**
```powershell
# Verify file exists
Test-Path "c:\Users\johng\Documents\Erevus\orfeas\backend\monitoring_stack\grafana-dashboard.json"

# If missing, check alternate location
Test-Path "c:\Users\johng\Documents\Erevus\orfeas\backend\monitoring_stack\grafana\provisioning\dashboards\dashboard.json"
```

If file is missing, it was not created properly. Check `md/GRAFANA_QUALITY_DASHBOARD_COMPLETE.md` for manual setup.

---

##  MANUAL VERIFICATION (IF SCRIPT FAILS)

### **1. Check Backend Quality Validator:**
```powershell
# Backend logs should show:
[QUALITY] Quality Validator initialized - 4-stage validation, auto-repair, threshold=0.80
```

### **2. Test Prometheus Metrics Manually:**
```powershell
Invoke-RestMethod -Uri http://localhost:5000/metrics | Select-String "quality"
```

### **3. Verify Grafana Manually:**
```powershell
# Check Grafana health
Invoke-RestMethod -Uri http://localhost:3000/api/health

# Open dashboard
Start-Process http://localhost:3000
```

### **4. Generate Test Model Manually:**
```powershell
# Create test image
python -c "from PIL import Image; img = Image.new('RGB', (512, 512), 'blue'); img.save('test.png')"

# Upload via web interface
Start-Process http://localhost:5000/studio
```

---

##  NEXT STEPS AFTER ACTIVATION

### **1. Configure Alert Notifications**

Edit Grafana notification channels:
1. Grafana → Alerting → Contact points
2. Add Email or Slack webhook
3. Link to Panel 23 (Validation Failures alert)
4. Test alert sends correctly

### **2. Generate More Data**

Populate trend graphs with real data:
```powershell
# Generate 5-10 test models
for ($i = 1; $i -le 5; $i++) {
    Write-Host "Generating model $i/5..."
    # Upload different test images via web UI
    Start-Sleep -Seconds 60
}
```

### **3. Customize Dashboard**

Edit `backend/monitoring_stack/grafana-dashboard.json`:
- Adjust quality thresholds to match your standards
- Add custom panels for specific metrics
- Change time ranges (1h → 6h → 24h)
- Export data to CSV for analysis

### **4. Monitor Production**

Daily checks:
- Panel 15: Overall quality should be  Green (80-95%)
- Panel 17: Auto-repairs should be <50/day
- Panel 21: 60%+ should be A/A- grades
- Panel 23: Validation failures should be <1/sec

Weekly review:
- Panel 19: Quality trend should be stable or improving
- Panel 24: Threshold pass rate should increase
- Export quality data for reports

---

##  DOCUMENTATION

**Full Documentation:**
- `md/QUALITY_METRICS_IMPLEMENTATION_COMPLETE.md` - Core implementation
- `md/QUALITY_METRICS_INTEGRATION_COMPLETE.md` - Integration details
- `md/GRAFANA_QUALITY_DASHBOARD_COMPLETE.md` - Dashboard guide (700+ lines)

**Quick References:**
- `txt/PHASE2_INTEGRATION_COMPLETE.txt` - Enhanced validation status
- This file: Activation guide

---

##  SUCCESS CRITERIA

After activation, you should have:

 **Backend:** `[QUALITY]` logs appearing for each generation
 **Prometheus:** 12 quality metrics exported at `/metrics`
 **Grafana:** 10 quality panels visible and updating
 **API:** Quality metrics in generation response JSON
 **Alerts:** Panel 23 configured to alert on high failure rate

**Total Time Investment:**
- Setup: 5 minutes (run script)
- Configuration: 10 minutes (alert notifications)
- Testing: 15 minutes (generate test models)
- **Total:** ~30 minutes to full production quality monitoring! 

---

**ORFEAS AI**
**OPTIMAL QUALITY MONITORING ACHIEVED! **
