name: ORFEAS Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  test:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/tests/requirements-test.txt

    - name: Run linting
      run: |
        pip install flake8
        flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 backend/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Run tests with pytest
      run: |
        cd backend
        pytest tests/ -v --cov=. --cov-report=xml --cov-report=html --cov-report=term -m "not slow"
      continue-on-error: false

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: unittests
        name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
        fail_ci_if_error: false

    - name: Generate HTML test report
      if: always()
      run: |
        cd backend
        pytest tests/ --html=test-report.html --self-contained-html -m "not slow"
      continue-on-error: true

    - name: Upload test report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-report-${{ matrix.os }}-py${{ matrix.python-version }}
        path: backend/test-report.html
        retention-days: 30

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run bandit security linter
      run: |
        bandit -r backend/ -f json -o bandit-report.json || true
        bandit -r backend/ -f txt
      continue-on-error: true

    - name: Run safety vulnerability check
      run: |
        pip install -r backend/requirements.txt
        safety check --json > safety-report.json || true
        safety check
      continue-on-error: true

    - name: Upload security reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  code-quality:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint mypy
        pip install -r backend/requirements.txt

    - name: Run pylint
      run: |
        pylint backend/*.py --exit-zero --output-format=json > pylint-report.json
        pylint backend/*.py --exit-zero
      continue-on-error: true

    - name: Run mypy type checking
      run: |
        mypy backend/ --ignore-missing-imports --no-strict-optional --check-untyped-defs
      continue-on-error: true

    - name: Upload code quality reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: pylint-report.json
        retention-days: 30
