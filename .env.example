# ==============================================================================
# ORFEAS AI 2D‚Üí3D Studio - Environment Configuration
# ==============================================================================
# THERION AI Project - EREVUS Collective
#
# Copy this file to .env and configure for your environment
# ==============================================================================

# Server Configuration
# --------------------
ORFEAS_HOST=0.0.0.0
ORFEAS_PORT=5000
ORFEAS_DEBUG=false

# Processing Mode
# ---------------
# Options: full_ai, safe_fallback, powerful_3d
# - full_ai: Full Hunyuan3D-2.1 AI processing (requires models)
# - safe_fallback: Graceful fallback with error recovery
# - powerful_3d: Advanced MiDaS + marching cubes algorithms
ORFEAS_MODE=full_ai

# GPU Configuration
# -----------------
GPU_MEMORY_LIMIT_GB=8
CUDA_VISIBLE_DEVICES=0

# Security Configuration
# ----------------------
# üîí THERION SECURITY FIX: SECRET_KEY is validated on startup
# ‚ö†Ô∏è The default value 'orfeas-unified-therion-2025' will be REJECTED
# Generate a secure key with: python -c 'import secrets; print(secrets.token_hex(32))'
# Must be at least 32 characters long
SECRET_KEY=orfeas-unified-therion-2025-CHANGE-IN-PRODUCTION

# PRODUCTION: Set to 'true' when deploying to production
# When true, Flask development server will refuse to start (use gunicorn instead)
# üîí THERION SECURITY FIX: Production mode detection prevents unsafe deployment
PRODUCTION=false

# CORS Configuration
# ------------------
# üîí THERION SECURITY FIX: CORS wildcard "*" triggers security warning
# WARNING: Using "*" allows all origins (insecure for production)
# In production, set specific allowed origins like: http://localhost:3000,https://yourdomain.com
# Validation: Warns if wildcard detected in production mode
CORS_ORIGINS=*

# Rate Limiting
# -------------
# üîí THERION SECURITY FIX: Rate limiting validation on startup
# Recommended: true for production (prevents API abuse)
# Validation: Warns if disabled in production mode
ENABLE_RATE_LIMITING=false
RATE_LIMIT_PER_MINUTE=60

# File Upload Limits
# ------------------
MAX_UPLOAD_MB=50

# Paths Configuration
# -------------------
# Leave empty to use defaults (./uploads, ./outputs, ./temp)
UPLOADS_DIR=
OUTPUTS_DIR=
TEMP_DIR=

# Model Paths (for FULL_AI mode)
# -------------------------------
HUNYUAN3D_MODEL_PATH=../Hunyuan3D-2.1/models
MIDAS_MODEL_PATH=

# API Keys (if using external services)
# --------------------------------------
OPENAI_API_KEY=
STABILITY_API_KEY=

# Logging Configuration
# ---------------------
LOG_LEVEL=INFO
LOG_FILE=logs/orfeas.log

# Database Configuration (future)
# --------------------------------
DATABASE_URL=
REDIS_URL=

# Advanced Settings
# -----------------
ENABLE_RATE_LIMITING=false
RATE_LIMIT_PER_MINUTE=60
ENABLE_ANALYTICS=false

# Development Settings
# --------------------
RELOAD_ON_CHANGE=false
SHOW_STACK_TRACES=false

# ==============================================================================
# üîí THERION SECURITY VALIDATION SUMMARY
# ==============================================================================
# The following validations are performed on server startup:
#
# ‚úÖ SECRET_KEY: Rejects default value, requires ‚â•32 chars
# ‚úÖ ORFEAS_PORT: Must be 1-65535, warns if <1024
# ‚úÖ ORFEAS_HOST: Must be valid IP format
# ‚úÖ ORFEAS_MODE: Must be full_ai, safe_fallback, or powerful_3d
# ‚úÖ GPU_MEMORY_LIMIT_GB: Must be 1-128GB, warns if >128GB
# ‚úÖ MAX_UPLOAD_MB: Must be 1-500MB, warns if >500MB
# ‚úÖ CORS_ORIGINS: Warns if wildcard "*" in production
# ‚úÖ ORFEAS_DEBUG: Errors if true in production mode
# ‚úÖ ENABLE_RATE_LIMITING: Warns if disabled in production
# ‚úÖ HUNYUAN3D_MODEL_PATH: Warns if path doesn't exist
#
# Server will exit with detailed error message if validation fails.
# For complete validation details, see: backend/main.py validate_environment()
#
# ==============================================================================
# üìö DOCUMENTATION REFERENCES
# ==============================================================================
# - QUICK_REFERENCE_GUIDE.md (5-minute overview)
# - CRITICAL_FIXES_IMPLEMENTATION_COMPLETE.md (deployment guide)
# - THERION_TQM_FINAL_REPORT.md (complete audit)
#
# Production Deployment:
#   1. Copy .env.example to .env
#   2. Generate SECRET_KEY: python -c 'import secrets; print(secrets.token_hex(32))'
#   3. Set PRODUCTION=true
#   4. Install: pip install -r backend/requirements-production.txt
#   5. Run: gunicorn --worker-class eventlet --workers 1 backend.main:app
#
# Validation Tests:
#   python backend/test_critical_fixes.py (26/26 tests pass)
