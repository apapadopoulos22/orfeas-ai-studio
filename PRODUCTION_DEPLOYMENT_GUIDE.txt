ORFEAS AI STUDIO - PRODUCTION DEPLOYMENT GUIDE
===============================================

Date: October 22, 2025
Implementation: Three.js + 3DViewer.net iframe Fallback
Status: READY FOR PRODUCTION

---

## PRE-DEPLOYMENT CHECKLIST

### Code Quality
[✅] Three.js implementation complete
[✅] 3DViewer.net iframe fallback implemented
[✅] viewOnline3DViewer() function added
[✅] Error handling for both WebGL and STL load failures
[✅] No syntax errors or console warnings
[✅] No breaking changes to existing functionality
[✅] Responsive design maintained
[✅] Mobile optimization intact

### Testing Completed
[✅] Function verification: viewOnline3DViewer exists
[✅] URL verification: 3dviewer.net embedded correctly
[✅] Button implementation verified
[✅] Error UI styling professional
[✅] Download button functionality

### Documentation
[✅] Technical implementation guide created
[✅] User guide created
[✅] Architecture documented
[✅] Verification report completed

---

## PRODUCTION DEPLOYMENT STEPS

### STEP 1: Update Configuration

File: `c:\Users\johng\Documents\oscar\.env`

Current (Development):
```
ENABLE_LOCAL_LLMS=true
LOCAL_LLM_SERVER=http://localhost:11434
```

Change to (Production):
```
ENABLE_LOCAL_LLMS=false
```

Optional - Add production domain:
```
PRODUCTION_DOMAIN=https://orfeas.ai
API_ENDPOINT=https://api.orfeas.ai
```

### STEP 2: Update API_BASE in Frontend

File: `synexa-style-studio.html` (Line 1527)

Current (Development):
```javascript
const API_BASE = "http://127.0.0.1:5000";
```

For Production, change to:
```javascript
const API_BASE = "https://api.orfeas.ai";
// OR
const API_BASE = "https://your-production-domain.com/api";
```

### STEP 3: Backend Configuration

Ensure backend has production settings:

1. Gunicorn configuration (production-ready):
   - Workers: 4-8 (based on CPU cores)
   - Threads: 2-4 per worker
   - Timeout: 120s
   - Worker class: gthread (for GPU tasks)

2. Nginx reverse proxy (if using):
   - Enable HTTPS/SSL
   - Configure CORS headers
   - Set proper timeouts
   - Enable compression

3. GPU Configuration:
   - Verify CUDA 12.0 available
   - Set GPU_MEMORY_LIMIT=0.8
   - Enable GPU monitoring
   - Set MAX_CONCURRENT_JOBS=3

### STEP 4: Security Configuration

#### HTTPS/SSL
```bash
# Generate or obtain SSL certificates
# Update nginx/production config with SSL paths
```

#### CORS Headers (Backend)
```python
# Ensure backend returns proper CORS headers
CORS_ORIGINS = ["https://orfeas.ai", "https://www.orfeas.ai"]
```

#### Security Headers
```
X-Content-Type-Options: nosniff
X-Frame-Options: DENY
X-XSS-Protection: 1; mode=block
Strict-Transport-Security: max-age=31536000
Content-Security-Policy: default-src 'self' https://3dviewer.net
```

#### iframe Permissions (Already Configured)
```html
<iframe
  allow="accelerometer; autoplay; camera; gyroscope; magnetometer; microphone; payment; usb"
  allowfullscreen>
</iframe>
```

### STEP 5: Environment Variables

Create/Update production `.env`:

```bash
# Backend Settings
FLASK_ENV=production
DEBUG=false
LOG_LEVEL=INFO

# API Configuration
API_HOST=0.0.0.0
API_PORT=5000
API_WORKERS=8

# GPU Configuration
DEVICE=cuda
CUDA_VISIBLE_DEVICES=0
GPU_MEMORY_LIMIT=0.8
MAX_CONCURRENT_JOBS=3

# Model Paths
HUNYUAN_MODEL_PATH=/models/hunyuan3d-2.1
CACHE_DIR=/cache

# Logging
LOG_FILE=/var/log/orfeas/backend.log
ENABLE_MONITORING=true

# Local LLM (disable in production if not needed)
ENABLE_LOCAL_LLMS=false

# Domains
CORS_ORIGINS=https://orfeas.ai
```

### STEP 6: Database & Cache Setup

If using persistent storage:

```bash
# Create necessary directories
mkdir -p /var/log/orfeas
mkdir -p /cache/huggingface
mkdir -p /var/orfeas/outputs

# Set permissions
chmod 755 /var/log/orfeas
chmod 755 /cache
```

### STEP 7: Deploy Frontend

Options:

**Option A: CDN Hosting**
```bash
# Upload to CloudFront/CloudFlare
# Serve synexa-style-studio.html as main file
# Cache static assets (CSS, JS)
```

**Option B: Docker Container**
```bash
# Use existing Dockerfile.production
docker build -t orfeas-frontend:latest -f Dockerfile.production .
docker run -d --name orfeas-frontend -p 80:80 -p 443:443 orfeas-frontend:latest
```

**Option C: Traditional Server**
```bash
# Copy files to web server
cp synexa-style-studio.html /var/www/orfeas/
# Configure nginx to serve static files
```

### STEP 8: Deploy Backend

**Option A: Docker Compose (Recommended)**
```bash
# Use production docker-compose file
docker-compose -f docker-compose.production.yml up -d

# Verify services
docker-compose ps
docker-compose logs -f backend
```

**Option B: Direct Python Execution**
```bash
cd /home/orfeas/backend
python -m gunicorn -w 8 --threads 2 -b 0.0.0.0:5000 main:app
```

**Option C: Systemd Service**
```bash
# Create /etc/systemd/system/orfeas.service
[Unit]
Description=ORFEAS AI Backend
After=network.target

[Service]
Type=notify
User=orfeas
WorkingDirectory=/home/orfeas/backend
ExecStart=/usr/bin/python -m gunicorn -w 8 --threads 2 -b 0.0.0.0:5000 main:app
Restart=always

[Install]
WantedBy=multi-user.target

# Enable and start
sudo systemctl enable orfeas
sudo systemctl start orfeas
```

### STEP 9: Health Checks

Test production deployment:

```bash
# Test API health
curl https://api.orfeas.ai/health

# Expected response:
# {
#   "status": "healthy",
#   "gpu_available": true,
#   "gpu_count": 1,
#   "cuda_version": "12.0"
# }

# Test 3D viewer endpoint
curl https://api.orfeas.ai/api/download/test-job/model.stl

# Test frontend loads
curl https://orfeas.ai
```

### STEP 10: Monitoring & Logging

Set up monitoring:

```bash
# Backend logs
tail -f /var/log/orfeas/backend.log

# API request logs
tail -f /var/log/orfeas/api_requests.log

# GPU monitoring
nvidia-smi -l 1

# System monitoring
top
```

Configure alerts for:
- API errors (500, 502, 503)
- GPU memory exceeded
- Job queue backed up
- High latency (>30s for generation)

---

## PRODUCTION DEPLOYMENT CHECKLIST

### Pre-Deployment
- [ ] All code committed and tagged
- [ ] .env production config created
- [ ] SSL certificates obtained
- [ ] Database backups configured
- [ ] Monitoring setup complete
- [ ] Team notified

### Deployment
- [ ] Stop current services (if applicable)
- [ ] Update API_BASE in frontend
- [ ] Deploy backend (Docker or direct)
- [ ] Deploy frontend (CDN/Server)
- [ ] Run health checks
- [ ] Verify all features working
- [ ] Test error scenarios

### Post-Deployment
- [ ] Monitor error logs (1 hour)
- [ ] Monitor performance (1 hour)
- [ ] Verify 3D viewer working
- [ ] Test download functionality
- [ ] Verify 3DViewer.net iframe loading
- [ ] Monitor GPU usage
- [ ] Verify backups running
- [ ] Document any issues

---

## QUICK DEPLOYMENT COMMANDS

### Using Docker Compose (Easiest)

```bash
# 1. Update configuration
nano .env  # Set ENABLE_LOCAL_LLMS=false, update domains

# 2. Build and deploy
docker-compose -f docker-compose.production.yml build
docker-compose -f docker-compose.production.yml up -d

# 3. Verify
docker-compose logs -f backend
curl http://localhost:5000/health

# 4. Update DNS to point to this server
# Update synexa-style-studio.html API_BASE to production domain
```

### Using Traditional Deployment

```bash
# 1. SSH to production server
ssh user@production-server

# 2. Pull latest code
cd /home/orfeas
git pull origin main

# 3. Update environment
cp .env.production .env

# 4. Install/update dependencies
pip install -r backend/requirements.txt

# 5. Start backend
cd backend
python -m gunicorn -w 8 --threads 2 -b 0.0.0.0:5000 main:app &

# 6. Copy frontend to web server
cp synexa-style-studio.html /var/www/orfeas/

# 7. Restart web server
sudo systemctl restart nginx
```

---

## ROLLBACK PROCEDURE

If issues occur:

```bash
# 1. Stop current services
docker-compose down
# OR
sudo systemctl stop orfeas

# 2. Revert to previous version
git checkout previous-tag

# 3. Start with previous code
docker-compose up -d
# OR
sudo systemctl start orfeas

# 4. Verify services
curl http://localhost:5000/health
```

---

## PRODUCTION VALIDATION

### Frontend Tests

- [ ] Load https://orfeas.ai in Chrome
- [ ] Load in Firefox
- [ ] Load in Safari
- [ ] Load in Edge
- [ ] Test on mobile (iOS)
- [ ] Test on mobile (Android)
- [ ] Disable WebGL and test fallback
- [ ] Test upload functionality
- [ ] Test 3D generation
- [ ] Test "View Online" button
- [ ] Test "Download" button
- [ ] Test health check button

### Backend Tests

```bash
# Test API endpoints
curl -X POST https://api.orfeas.ai/api/upload-image -F "image=@test.png"
curl https://api.orfeas.ai/api/job-status/test-id
curl https://api.orfeas.ai/api/download/test-id/model.stl
curl https://api.orfeas.ai/health
```

### Integration Tests

- [ ] Image upload works
- [ ] 3D generation completes
- [ ] Model downloads correctly
- [ ] 3DViewer.net iframe loads
- [ ] Windows 3D Viewer opens file
- [ ] Performance acceptable (<2min generation)
- [ ] No GPU errors
- [ ] No memory leaks

---

## PERFORMANCE OPTIMIZATION

### Backend Optimization
- Enable gzip compression
- Set proper cache headers
- Use CDN for static files
- Optimize GPU utilization
- Monitor memory usage

### Frontend Optimization
- Minify JavaScript
- Compress images
- Enable browser caching
- Use lazy loading
- Optimize Three.js bundle

### Monitoring & Maintenance
- Monitor API response times
- Track GPU utilization
- Monitor disk space
- Check error rates
- Performance trending

---

## TROUBLESHOOTING

### Issue: API unavailable
Solution:
```bash
# Check backend running
docker ps
ps aux | grep gunicorn

# Check logs
docker-compose logs backend
tail /var/log/orfeas/backend.log

# Restart
docker-compose restart backend
# OR
sudo systemctl restart orfeas
```

### Issue: 3DViewer.net not loading
Solution:
```bash
# Check CORS headers
curl -I https://api.orfeas.ai/api/download/test/model.stl

# Verify firewall allows 3dviewer.net
# Check iframe embed URL encoding
```

### Issue: WebGL viewer not working
Solution:
- This is expected behavior
- Fallback to 3DViewer.net should activate
- Check browser console for errors (F12)

### Issue: Download not working
Solution:
```bash
# Verify download endpoint
curl -I https://api.orfeas.ai/api/download/test/model.stl

# Check Content-Disposition header
# Verify file exists in output directory
```

---

## SUPPORT & MONITORING

### Ongoing Maintenance

Daily:
- Monitor error logs
- Check GPU health
- Verify API response times

Weekly:
- Backup databases
- Review performance metrics
- Check for updates

Monthly:
- Security patches
- Performance optimization
- Capacity planning

### Contacts

- Backend Issues: backend@orfeas.ai
- Frontend Issues: frontend@orfeas.ai
- GPU/Infra: infra@orfeas.ai
- General Support: support@orfeas.ai

---

## DEPLOYMENT COMPLETE ✅

Once all steps completed:

1. Frontend deployed to production domain
2. Backend running on production servers
3. 3D viewer working (Three.js primary + 3DViewer.net fallback)
4. Download functionality operational
5. Health checks passing
6. Monitoring active
7. Team notified

**System ready for production users! 🚀**

---

## NEXT STEPS

1. Deploy to staging first
2. Run full test suite
3. Get team approval
4. Deploy to production
5. Monitor for issues
6. Notify users of new features

Questions? See documentation files:
- THREE_JS_IFRAME_FALLBACK_IMPLEMENTATION.md
- THREE_VIEWER_USER_GUIDE.md
- RECOMMENDED_SOLUTION_IMPLEMENTED.md
