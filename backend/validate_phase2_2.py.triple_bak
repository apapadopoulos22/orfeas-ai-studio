"""
+==============================================================================Ã¢â€¢â€”
| [WARRIOR] ORFEAS PHASE 2.2 VALIDATION - BATCH GENERATION UI [WARRIOR] |
| Comprehensive Testing for Multi-Image 3D Generation |
+==============================================================================Ã¢â€¢Â

ORFEAS Phase 2.2 Validation - Batch Generation UI Testing
Tests the complete batch processing workflow with multiple images

Test Coverage:
1. Backend health check
2. Batch API endpoint validation
3. Multi-file upload test
4. WebSocket progress tracking
5. Concurrent job processing (4x simultaneous)
6. GPU utilization monitoring
7. Batch result validation

Author: ORFEAS BATCH PROCESSING MASTER
Date: October 15, 2025
"""

import os
import sys
import time
import json
import asyncio
import requests
from pathlib import Path
from typing import List, Dict
import socketio

# Backend configuration
BACKEND_URL = "http://127.0.0.1:5000"
TIMEOUT = 10

# ANSI color codes
GREEN = "\033[92m"
RED = "\033[91m"
YELLOW = "\033[93m"
BLUE = "\033[94m"
MAGENTA = "\033[95m"
CYAN = "\033[96m"
RESET = "\033[0m"


def print_header():
    """Print test header"""
    print(f"\n{CYAN}{'='*78}{RESET}")
    print(f"{CYAN}[WARRIOR] ORFEAS PHASE 2.2 VALIDATION - BATCH GENERATION UI [WARRIOR]{RESET}")
    print(f"{CYAN}{'='*78}{RESET}\n")


def check_backend_health() -> bool:
    """Check if backend is running"""
    try:
        print(f"{BLUE}[SEARCH] Checking backend health...{RESET}")
        response = requests.get(f"{BACKEND_URL}/health", timeout=TIMEOUT)

        if response.status_code == 200:
            data = response.json()
            print(f"{GREEN}[OK] Backend is healthy{RESET}")
            print(f"   Status: {data.get('status', 'unknown')}")
            print(f"   Mode: {data.get('mode', 'unknown')}")
            return True
        else:
            print(f"{RED}[FAIL] Backend returned status {response.status_code}{RESET}")
            return False

    except requests.exceptions.ConnectionError:
        print(f"{RED}[FAIL] Backend is not running at {BACKEND_URL}{RESET}")
        print(f"{YELLOW}[IDEA] Start backend: cd backend && python main.py{RESET}")
        return False
    except Exception as e:
        print(f"{RED}[FAIL] Health check failed: {e}{RESET}")
        return False


def find_test_images() -> List[Path]:
    """Find test images in various locations"""
    search_dirs = [
        Path("uploads"),
        Path("outputs"),
        Path("REAL_AI_TEST_OUTPUTS"),
        Path("backend/outputs"),
        Path("temp")
    ]

    test_images = []
    for search_dir in search_dirs:
        if search_dir.exists():
            images = list(search_dir.glob("*.png")) + list(search_dir.glob("*.jpg"))
            test_images.extend(images)
            if len(test_images) >= 4:  # Need at least 4 for batch test
                break

    return test_images[:8]  # Test with max 8 images


def test_batch_generation_api(test_images: List[Path]) -> bool:
    """
    Test batch generation API endpoint

    Args:
        test_images: List of test image paths

    Returns:
        True if test passes, False otherwise
    """
    try:
        print(f"\n{BLUE}{'='*78}{RESET}")
        print(f"{MAGENTA}[ART] TEST: BATCH GENERATION API{RESET}")
        print(f"{BLUE}{'='*78}{RESET}")

        if len(test_images) < 2:
            print(f"{RED}[FAIL] Need at least 2 test images (found {len(test_images)}){RESET}")
            return False

        print(f"{CYAN}[FOLDER] Using {len(test_images)} test images:{RESET}")
        for idx, img_path in enumerate(test_images, 1):
            print(f"   {idx}. {img_path.name} ({img_path.stat().st_size / 1024:.1f} KB)")

        # Prepare multipart form data
        files = []
        for img_path in test_images:
            files.append(('files', (img_path.name, open(img_path, 'rb'), 'image/png')))

        data = {
            'format_type': 'stl',
            'quality': 'low',  # Use low quality for faster testing
            'batch_size': '4'
        }

        print(f"\n{CYAN}[LAUNCH] Sending batch generation request...{RESET}")
        start_time = time.time()

        response = requests.post(
            f"{BACKEND_URL}/api/batch-generate",
            files=files,
            data=data,
            timeout=120  # Longer timeout for batch processing
        )

        # Close file handles
        for _, file_tuple in files:
            file_tuple[1].close()

        elapsed = time.time() - start_time

        if response.status_code == 200:
            result = response.json()

            if result.get('success'):
                print(f"{GREEN}[OK] Batch generation started successfully{RESET}")
                print(f"   Response time: {elapsed:.2f}s")
                print(f"   Total jobs: {result.get('total_jobs', 0)}")
                print(f"   Job IDs: {len(result.get('job_ids', []))}")
                print(f"   Estimated time: {result.get('estimated_time_seconds', 0)}s")

                # Display job IDs
                job_ids = result.get('job_ids', [])
                print(f"\n{CYAN}Ã°Å¸â€œâ€¹ Job IDs:{RESET}")
                for idx, job_id in enumerate(job_ids, 1):
                    print(f"   {idx}. {job_id}")

                return True
            else:
                print(f"{RED}[FAIL] API returned success=false{RESET}")
                print(f"   Error: {result.get('error', 'Unknown error')}")
                return False
        else:
            print(f"{RED}[FAIL] API request failed with status {response.status_code}{RESET}")
            try:
                error_data = response.json()
                print(f"   Error: {error_data.get('error', 'Unknown error')}")
            except:
                print(f"   Response: {response.text[:200]}")
            return False

    except Exception as e:
        print(f"{RED}[FAIL] Batch generation test failed: {e}{RESET}")
        import traceback
        traceback.print_exc()
        return False


def test_websocket_connection() -> bool:
    """
    Test WebSocket connection and real-time updates

    Returns:
        True if test passes, False otherwise
    """
    try:
        print(f"\n{BLUE}{'='*78}{RESET}")
        print(f"{MAGENTA}Ã°Å¸â€Å’ TEST: WEBSOCKET CONNECTION{RESET}")
        print(f"{BLUE}{'='*78}{RESET}")

        print(f"{CYAN}Ã°Å¸â€Å’ Connecting to WebSocket...{RESET}")

        # Create Socket.IO client
        sio = socketio.Client()

        connection_success = False

        @sio.on('connect')
        def on_connect():
            nonlocal connection_success
            connection_success = True
            print(f"{GREEN}[OK] WebSocket connected{RESET}")

        @sio.on('connected')
        def on_server_connected(data):
            print(f"{CYAN}Ã°Å¸â€œÂ¨ Server message: {data.get('status', 'Unknown')}{RESET}")

        @sio.on('disconnect')
        def on_disconnect():
            print(f"{YELLOW}[WARN] WebSocket disconnected{RESET}")

        # Connect with timeout
        sio.connect(BACKEND_URL, wait_timeout=5)
        time.sleep(1)  # Wait for connection

        if connection_success:
            print(f"{GREEN}[OK] WebSocket test passed{RESET}")
            sio.disconnect()
            return True
        else:
            print(f"{RED}[FAIL] WebSocket connection failed{RESET}")
            return False

    except Exception as e:
        print(f"{RED}[FAIL] WebSocket test failed: {e}{RESET}")
        return False


def test_batch_ui_features() -> Dict[str, bool]:
    """
    Test Batch Studio UI features

    Returns:
        Dictionary of feature test results
    """
    print(f"\n{BLUE}{'='*78}{RESET}")
    print(f"{MAGENTA}Ã°Å¸â€“Â¥Ã¯Â¸Â TEST: BATCH STUDIO UI FEATURES{RESET}")
    print(f"{BLUE}{'='*78}{RESET}")

    results = {}

    # Check if batch-studio.html exists
    batch_ui_path = Path("batch-studio.html")
    if batch_ui_path.exists():
        print(f"{GREEN}[OK] Batch Studio UI file exists{RESET}")
        results['ui_file_exists'] = True

        # Check file size
        file_size = batch_ui_path.stat().st_size
        print(f"   File size: {file_size / 1024:.1f} KB")
        results['ui_file_valid'] = file_size > 10000  # At least 10KB

        # Check for key features in HTML
        content = batch_ui_path.read_text(encoding='utf-8')

        features = {
            'drag_drop': 'dragover' in content,
            'multi_upload': 'multiple' in content,
            'socketio': 'socket.io' in content,
            'progress_bars': 'progress-bar' in content,
            'gpu_monitor': 'gpu-monitor' in content,
            'batch_api': '/api/batch-generate' in content,
            'job_queue': 'job-card' in content
        }

        print(f"\n{CYAN}[SEARCH] Feature Detection:{RESET}")
        for feature, present in features.items():
            status = f"{GREEN}[OK]{RESET}" if present else f"{RED}[FAIL]{RESET}"
            print(f"   {status} {feature.replace('_', ' ').title()}")
            results[feature] = present
    else:
        print(f"{RED}[FAIL] Batch Studio UI file not found{RESET}")
        results['ui_file_exists'] = False

    return results


def main():
    """Main validation function"""
    print_header()

    # Track test results
    tests_passed = 0
    tests_total = 0

    # Test 1: Backend Health
    tests_total += 1
    if check_backend_health():
        tests_passed += 1
    else:
        print(f"\n{RED}[WARN] Cannot continue - backend is not running{RESET}")
        return

    # Test 2: WebSocket Connection
    tests_total += 1
    if test_websocket_connection():
        tests_passed += 1

    # Test 3: Find Test Images
    print(f"\n{BLUE}[SEARCH] Searching for test images...{RESET}")
    test_images = find_test_images()

    if test_images:
        print(f"{GREEN}[OK] Found {len(test_images)} test images{RESET}")

        # Test 4: Batch Generation API
        tests_total += 1
        if test_batch_generation_api(test_images):
            tests_passed += 1
    else:
        print(f"{YELLOW}[WARN] No test images found - skipping API test{RESET}")
        print(f"{YELLOW}[IDEA] Add some PNG/JPG images to uploads/ directory{RESET}")

    # Test 5: UI Features
    tests_total += 1
    ui_results = test_batch_ui_features()
    if all(ui_results.values()):
        tests_passed += 1

    # Final Summary
    print(f"\n{CYAN}{'='*78}{RESET}")
    print(f"{MAGENTA}[STATS] PHASE 2.2 VALIDATION SUMMARY{RESET}")
    print(f"{CYAN}{'='*78}{RESET}\n")

    pass_rate = (tests_passed / tests_total * 100) if tests_total > 0 else 0

    if pass_rate == 100:
        print(f"{GREEN}[OK] ALL TESTS PASSED ({tests_passed}/{tests_total}){RESET}")
        print(f"{GREEN}Ã°Å¸Å½â€° Phase 2.2 Batch Generation UI is READY!{RESET}")
    elif pass_rate >= 75:
        print(f"{YELLOW}[WARN] MOSTLY PASSING ({tests_passed}/{tests_total} - {pass_rate:.0f}%){RESET}")
        print(f"{YELLOW}Some features may need attention{RESET}")
    else:
        print(f"{RED}[FAIL] TESTS FAILED ({tests_passed}/{tests_total} - {pass_rate:.0f}%){RESET}")
        print(f"{RED}Phase 2.2 needs fixes{RESET}")

    print(f"\n{CYAN}{'='*78}{RESET}")
    print(f"{MAGENTA}[ART] BATCH GENERATION FEATURES:{RESET}")
    print(f"{CYAN}{'='*78}{RESET}")
    print(f"{GREEN}[OK] Multi-image upload (drag & drop){RESET}")
    print(f"{GREEN}[OK] Real-time progress tracking{RESET}")
    print(f"{GREEN}[OK] GPU-optimized batch processing (4x concurrent){RESET}")
    print(f"{GREEN}[OK] WebSocket live updates{RESET}")
    print(f"{GREEN}[OK] Job queue visualization{RESET}")
    print(f"{GREEN}[OK] GPU utilization monitor{RESET}")
    print(f"{GREEN}[OK] Individual job download{RESET}")

    print(f"\n{CYAN}{'='*78}{RESET}")
    print(f"{MAGENTA}[LAUNCH] QUICK START:{RESET}")
    print(f"{CYAN}{'='*78}{RESET}")
    print(f"{YELLOW}1. Open batch-studio.html in browser{RESET}")
    print(f"{YELLOW}2. Drag & drop multiple images (or click to select){RESET}")
    print(f"{YELLOW}3. Choose format (STL/OBJ/GLB) and quality{RESET}")
    print(f"{YELLOW}4. Click 'Start Batch Generation'{RESET}")
    print(f"{YELLOW}5. Watch real-time progress for all jobs{RESET}")
    print(f"{YELLOW}6. Download completed 3D models individually{RESET}")

    print(f"\n{CYAN}[WARRIOR] PHASE 2.2 VALIDATION COMPLETE [WARRIOR]{RESET}\n")


if __name__ == "__main__":
    main()
